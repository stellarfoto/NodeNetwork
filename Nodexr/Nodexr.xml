<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nodexr</name>
    </assembly>
    <members>
        <member name="M:Nodexr.Shared.IntegerRangeGenerator.FormatPairsToRegEx(System.Collections.Generic.List{Nodexr.Shared.IntegerRangeGenerator.Pair})">
            return the regular expressions that match the ranges in the given
            list of integers. The list is in the form firstRangeStart, firstRangeEnd, 
            secondRangeStart, secondRangeEnd, etc. Each regular expression is 0-left-padded,
            if necessary, to match strings of the given width.
        </member>
        <member name="M:Nodexr.Shared.IntegerRangeGenerator.GetRegexPairsRecursion(System.Int32,System.Int32)">
            return the list of integers that are the paired integers
            used to generate the regular expressions for the given
            range. Each pair of integers in the list -- 0,1, then 2,3,
            etc., represents a range for which a single regular expression
            is generated.
        </member>
        <member name="M:Nodexr.Shared.NodeInputs.InputProcedural.Refresh">
            <summary>
            Causes the connected noodle to be re-rendered
            </summary>
        </member>
        <member name="P:Nodexr.Shared.NodeInputs.InputRange.AutoClearMax">
            <summary>
            Automatically clear the 'Max' field if the user set the value below MinValue.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.NodeInputs.NodeInput.Description">
            <summary>
            The description for this input. Displayed as a tooltip for most types of inputs.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.NodeInputs.NodeInput.AffectsLayout">
            <summary>
            Determines whether a change from this input should trigger a
            re-render of noodles connected to the parent node.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.Nodes.INode.PreviousNode">
            <summary>
            The node connected to the 'Previous' input.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.Nodes.INode.GetHeight">
            <summary>
            Get the height of the node, in pixels. Disabled inputs do not contribute to the height.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.Nodes.Node.CalculateInputsPos">
            <summary>
            Set the position of each input based on the position of the node.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.Nodes.NodeExtensionMethods.GetAllInputs(Nodexr.Shared.Nodes.INode)">
            <summary>
            Get all of the inputs to the node, including the 'previous' input and the sub-inputs of any InputCollections.
            InputCollections themselves are not returned.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.Nodes.NodeExtensionMethods.IsDependentOn(Nodexr.Shared.Nodes.INode,Nodexr.Shared.NodeInputs.INodeInput)">
            <summary>
            Checks whether the output of the node is dependent on the value of the given input.
            Used for finding cyclic dependencies.
            </summary>
            <returns>True if there is a dependency, false otherwise</returns>
        </member>
        <member name="M:Nodexr.Shared.NodeTypes.OrNode.#ctor(System.Collections.Generic.IEnumerable{Nodexr.Shared.Nodes.INodeOutput})">
            <summary>
            Creates an OrNode with the given nodes as inputs.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.NodeTypes.OrNode.#ctor(Nodexr.Shared.Nodes.INodeOutput[])">
            <summary>
            Creates an OrNode with the given nodes as inputs.
            This overload is to allow easy instantiation with params.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.NodeTypes.QuantifierNode.RequiresGroupToQuantify(Nodexr.Shared.Nodes.Node)">
            <summary>
            Check whether the given node needs a non-capturing group before it can be quantified.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.RegexParsers.GroupParser.ParseGroup">
            <summary>
            Parse any type of group. This includes anything in (non-escaped) parentheses.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.Services.NodeHandler.Tree">
            <summary>
            The <c>NodeTree</c> containing the collection of nodes in the current expression.
            </summary>
        </member>
        <member name="P:Nodexr.Shared.Services.NodeHandler.SelectedNode">
            <summary>
            The currently selected node.
            </summary>
        </member>
        <member name="E:Nodexr.Shared.Services.NodeHandler.OutputChanged">
            <summary>
            Called when the output of the node graph has changed.
            </summary>
        </member>
        <member name="E:Nodexr.Shared.Services.NodeHandler.OnRequireNoodleRefresh">
            <summary>
            Called when the state of the noodles has changed, but the noodles have not been re-rendered automatically.
            </summary>
        </member>
        <member name="E:Nodexr.Shared.Services.NodeHandler.OnRequireNodeGraphRefresh">
            <summary>
            Called when the state of the node graph has changed, but the node graph has not been re-rendered automatically.
            </summary>
        </member>
        <member name="M:Nodexr.Shared.Services.NodeHandler.TryCreateTreeFromRegex(System.String)">
            <summary>
            Parses a Regular Expression and creates a node tree from it. The previous <c>Tree</c> is then overwritten by the new one.
            </summary>
            <param name="regex">The regular expression to parse, in string format</param>
            <returns>Whether or not the parse attempt succeeded</returns>
        </member>
    </members>
</doc>
