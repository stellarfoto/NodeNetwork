@inject INodeHandler NodeHandler

@{
    //Store the pairs of inputs and nodes used to render the gradients
    var gradientPairs = new List<(InputProcedural input, INode node)>();
}

@foreach (var node in Nodes)
{
    var inputsWithNoodles = node.GetAllInputs()
        .OfType<InputProcedural>()
        .Where(input => input.Connected);

    @foreach (var input in inputsWithNoodles)
    {
        gradientPairs.Add((input, node));
        <NoodleSvg @key="input" Noodle="@input" Gradient="@GradientName(input, node)"/>
    }
}

<defs>
    @foreach (var (input, node) in gradientPairs)
    {
        <linearGradient id="@GradientName(input, node)" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:@input.ConnectedNode.CssColor"></stop>
            <stop offset="100%" style="stop-color:@node.CssColor"></stop>
        </linearGradient>
    }
</defs>

@functions {

    public string GradientName(InputProcedural input, INode node)
    {
        return "gradient-"
        + input.ConnectedNode.CssName
        + "-"
        + node.CssName;
    }

    protected override void OnInitialized()
    {
        NodeHandler.OnRequireNoodleRefresh += (sender, e) => Refresh();
    }

    void Refresh()
    {
        StateHasChanged();
    }

    [Parameter] public IEnumerable<INode> Nodes { get; set; }
}