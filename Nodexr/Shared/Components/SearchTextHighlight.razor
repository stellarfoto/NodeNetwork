@using System.Text.RegularExpressions;
@using System.Linq;

<div class="search-text-backdrop">
    <div class="search-text-highlight">
        @foreach ((string text, bool isMatch) str in Substrings)
        {
            if (str.isMatch)
            {
                <mark>@str.text</mark>
            }
            else
            {
                <span>@str.text</span>
            }
        }
    </div>
</div>
@functions {
    [Parameter] public string Text { get; set; }
    [Parameter] public MatchCollection Matches { get; set; }


    public List<(string text, bool isMatch)> Substrings
    {
        get
        {
            //substrings are returned as a List instead of IEnumerable to allow for Error catching in MoveNext().
            var matchesSafe = new List<(string, bool)>();
            if (Matches is null)
            {
                return matchesSafe;
            }
            try
            {
                int previousMatchEnd = 0;
                //Matches are ordered by index to support the RightToLeft Regex option
                foreach (Match match in Matches.OrderBy(match => match.Index))
                {
                    //Add the text preceding the match
                    matchesSafe.Add((Text.Substring(previousMatchEnd, match.Index - previousMatchEnd), false));
                    //Add the matched text
                    matchesSafe.Add((match.Value, match.Success));
                    previousMatchEnd = match.Index + match.Length;
                }
            }
            catch(RegexMatchTimeoutException ex)
            {
                Console.WriteLine("Regex match timed out. " + ex.Message);
            }
            return matchesSafe;
        }
    }
}
